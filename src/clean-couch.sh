#!/bin/bash
# Title:        clean-couch.sh
# Description:  Deletes test databases generated by CouchDB, or any database 
#               matching the prefix or name given.    
# Author:       Matthew Norris
# Reference:    http://curl.haxx.se/docs/manpage.html
#               http://www.thegeekstuff.com/2010/07/bash-string-manipulation/
#               http://linuxcommand.org/wss0110.php
#

################################################################################
# Defaults  
################################################################################

# CouchDB's test databases are prefixed with this by default. 
STRING="test_" 

# CouchDB's attributes. 
PROTOCOL="http"
HOST="localhost"
PORT="5984"

################################################################################
# Helper functions 
################################################################################

# Prints the given error message and exits.
function errorMessage() {
    echo -e "\n\nError: $1...\n\nType '`basename $0` -h' for usage and options."
    exit 1
}

# Prints the given warning message and exits.
function warningMessage() {
    echo -e "Warning: $1."
    exit 2
}

# Prints this script's usage and exists. 
function outputUsage() {
    echo "Usage: `basename $0` [options...]"
    echo "Options:"
    echo "  -h/--help     Prints this message"
    echo "  -s/--string   Specifies the string to search for within the"
    echo "                database name. By default, it's searches for a prefix."
    echo "  -S/--suffix   Search for a suffix instead of a prefix"
    echo "  -u/--user     Specifies CouchDB username and password" 
    echo "                Expects this format: -u username password"
    
    exit 1
}

################################################################################
# Core functions 
################################################################################

# Echos a CouchDB instance string similar to this: 
#   http://username:password@localhost:5984
# If no authorization credentials are passed, it looks like this: 
#   http://localhost:5984
function echoCouchDB() {
    if [ -n "$1" ] && [ -n "$2" ]; then
        AUTH="$1:$2@"
    fi
    
    echo "$PROTOCOL://$AUTH$HOST:$PORT"
}

# Removes the specified databases. 
function removeDatabases() {

    # Get the list of databases. 
    COUCHDB=`echoCouchDB`
    DBS=`curl -s GET $COUCHDB/_all_dbs`
    # Strip the brackets. 
    DBS=${DBS:1:`expr ${#DBS}-2`}
    # Strip the quotes. 
    DBS=${DBS//\"/}
    # Create an array. 
    DBS=$(echo $DBS | tr "," "\n")
    
    # Traverse the list of databases. Find the ones that match the criteria, 
    # and append them to a string. We'll then use this string to create a new 
    # array to iterate through and delete. (This may seem strange, but we want 
    # to warn the user before they delete any databases, and bash has no 
    # concept of dynamic arrays.)
    
    STRING_CHECK=$STRING*
    DB_COUNT=0
    
    for db in $DBS
    do 
        # Check if string matches. If SUFFIX is true, search for a suffix.
        if [ -n "$SUFFIX" ]; then 
            STRING_CHECK=*$STRING
        fi
        
        if [[ $db == $STRING_CHECK ]]; then
            DEL_DBS="$DEL_DBS,$db"
            let "DB_COUNT+=1"
        fi
    done
    
    # Strip the preceding comma. 
    DEL_DBS=${DEL_DBS:1}
    
    # Create a new array. 
    DBS=$(echo $DEL_DBS | tr "," "\n")
    
    echo -e "$DB_COUNT databases were found meeting this criteria."
    
    # If there are no databases to delete, exit gracefully. 
    if [ $DB_COUNT -eq 0 ]; then
        exit 0
    fi
    
    # Otherwise, list them out and warn the user. 
    for db in $DBS
    do
        echo $db
    done
    
    echo -e "\nWARNING! DELETING IS IRREVERSIBLE.\n"
    echo -n "Are you sure you want to DELETE these databases? y|n "
    read CONTINUE
    CONTINUE=${CONTINUE,,}
    
    if [ $CONTINUE == "y" -o $CONTINUE == "yes" ]; then 
        for db in $DBS
        do
            echo -n "Deleting $db... "
            # Delete the database, replacing any slashes in the database name 
            # with a URL-friendly %2F. 
            RESULT=$(curl -s -X DELETE "`echoCouchDB $COUCH_USER $PASSWORD`/${db//\//%2F}") 
            if [[ "$RESULT" == *error* ]]; then
                echo $RESULT
                errorMessage $RESULT
            fi
            
            echo "Done."
        done
    fi
    
    exit 0
}

################################################################################
# Command line processing
################################################################################

# Parse the command line arguments. 
while [ "$#" -gt "0" ]; do
    case "$1" in
        -s|--string)
            shift 1
            STRING="$1"
            shift 1
            ;;
        -S|--suffix)
            shift 1
            SUFFIX=true
            ;;
        -u|--user) 
            shift 1
            COUCH_USER="$1"
            PASSWORD="$2"
            shift 2
            ;;
        -h|--help)
            outputUsage
            ;;
        -*|--*)
            errorMessage "Unknown option $1"
            ;;
        *)
            errorMessage "Unknown parameter $1"
            ;;
    esac
done

################################################################################
# Main
################################################################################

removeDatabases
 
